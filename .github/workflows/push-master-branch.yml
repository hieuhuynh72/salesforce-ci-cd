# Unique name for this workflow
name: Deploy master branch to production org

# Definition when the workflow should run
on:
    workflow_dispatch:
        inputs:
            session_id:
                required: true
    push:
        branches: [master]
        paths:
            - 'force-app/**'

# Jobs to be executed
jobs:
    deploy-branch-to-production-org:
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version

            # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            - name: 'Installing sfdx git delta'
              run: |
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            # Store secret for production org
            - name: 'Populate auth file with SFDX_URL secret of the integration and staging orgs'
              shell: bash
              run: |
                  echo 'force://PlatformCLI::177B7D344574489DCEA6B0FF09EA7B06CF576F71047DC2AC8F47A81FE14AF0E3@cxbe01-dev-ed.develop.my.salesforce.com' > ./SFDX_PRODUCTION_URL.txt

            - name: 'Create delta packages for new, modified or deleted metadata'
              run: |
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/

            # Push params to the .env deploy org
            # - name: 'Push params to the .env to deploy org'
            #   run: |
            #     echo "SF_BRANCH=$CI_COMMIT_BRANCH" >> $GITHUB_ENV

            # Authenticate to org
            # - name: 'Authenticate to Production Org'
            #   run: sfdx auth:sfdxurl:store -f ./SFDX_PRODUCTION_URL.txt -s -a production

            # - uses: actions/setup-node@v3
            #   with:
            #     node-version: '10'

            # - name: 'Install npm'
            #   run: |
            #     npm install

            # - name: 'Deploy the entire branch to Production org'
            #   # run: sfdx force:source:deploy -p force-app --testlevel RunLocalTests --json
            #   run: |
            #     node ./build/deploy

            # - name: 'Deploy destructive changes (if any) to Production org'
            # run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings
            # run: |
            #   node ./build/destroy

            - name: 'Run Prettier'
              run: npm run prettier

            #Authenticate to org
            - name: 'Authenticate to Production Org'
              run: sfdx auth:sfdxurl:store -f ./SFDX_PRODUCTION_URL.txt -s -a production

            - name: 'Deploy the entire branch to Production org'
              run: sfdx force:source:deploy -p force-app --testlevel RunLocalTests --json

            #create tag
            - name: Generate Tag
              id: tag
              run: |
                  DATE=$(date +"%y-%m-%d-%HH:%M")
                  TAG="$DATE"
                  echo "::set-output name=TAG::$TAG"

            - name: Create and push tag
              run: |
                  git tag -a ${{ steps.tag.outputs.TAG }} -m "Auto-generated tag: ${{ steps.tag.outputs.TAG }}"
                  git push origin ${{ steps.tag.outputs.TAG }}
